diff --git a/rsudp/c_plots.py b/rsudp/c_plots.py
index 2187ba2..85add38 100644
--- a/rsudp/c_plots.py
+++ b/rsudp/c_plots.py
@@ -47,7 +47,75 @@ try:
     import matplotlib.image as mpimg
     from matplotlib import rcParams
     from matplotlib.ticker import EngFormatter
+    import matplotlib.font_manager as fm
+    
+    # Configure matplotlib settings
     rcParams['toolbar'] = 'None'
+    
+    # Set default font to FrutigerNeueLTW1G-Medium with fallbacks
+    try:
+        # Refresh font cache to ensure newly installed fonts are available
+        try:
+            fm._rebuild()
+            printM('Refreshed matplotlib font cache', 'Plot')
+        except Exception as rebuild_error:
+            printM(f'Font cache rebuild warning: {rebuild_error}', 'Plot')
+        
+        # Search for the desired font in system fonts
+        font_found = False
+        font_family = None
+        target_font_path = None
+        
+        # Check all available fonts for FrutigerNeueLTW1G-Medium
+        for font in fm.fontManager.ttflist:
+            font_name = font.name
+            font_path = font.fname
+            
+            # Look for exact match first - check both name patterns
+            if ('Frutiger Neue LT W1G' in font_name and 'Medium' in font_name) or \
+               ('FrutigerNeueLTW1G' in font_name and 'Medium' in font_name) or \
+               ('FrutigerNeueLTW1G-Medium' in font_path):
+                font_family = font_name
+                target_font_path = font_path
+                font_found = True
+                printM(f'Found target font: {font_family} at {font_path}', 'Plot')
+                break
+        
+        # Fallback to any Frutiger font
+        if not font_found:
+            for font in fm.fontManager.ttflist:
+                if 'Frutiger' in font.name or 'Frutiger' in font.fname:
+                    font_family = font.name
+                    target_font_path = font.fname
+                    font_found = True
+                    printM(f'Using Frutiger fallback: {font_family}', 'Plot')
+                    break
+        
+        # Set font configuration
+        if font_found and font_family:
+            # Set multiple font parameters to ensure the font is used
+            rcParams['font.family'] = 'sans-serif'
+            rcParams['font.sans-serif'] = [font_family, 'DejaVu Sans', 'Arial', 'Liberation Sans', 'sans-serif']
+            
+            # Also try to register the font explicitly if we have the path
+            if target_font_path and os.path.exists(target_font_path):
+                try:
+                    fm.fontManager.addfont(target_font_path)
+                    printM(f'Registered font: {target_font_path}', 'Plot')
+                except:
+                    pass
+            
+            printM(f'Font configuration set to: {font_family}', 'Plot')
+        else:
+            printM('Frutiger font not found, using system default fonts', 'Plot')
+            rcParams['font.family'] = 'sans-serif'
+            rcParams['font.sans-serif'] = ['DejaVu Sans', 'Arial', 'Liberation Sans', 'sans-serif']
+        
+    except Exception as e:
+        printW(f'Font configuration failed: {e}, using default fonts', 'Plot')
+        rcParams['font.family'] = 'sans-serif'
+        rcParams['font.sans-serif'] = ['DejaVu Sans', 'Arial', 'sans-serif']
+    
     plt.ion()
     MPL = True
 
@@ -426,7 +494,7 @@ class Plot(AbcPlot):
         '''
         Initialize plot elements and calculate parameters.
         '''
-        self.fig = plt.figure(self.figure_num, figsize=(11, 3 * self.num_chans))
+        self.fig = plt.figure(self.figure_num, figsize=(11, 6 * self.num_chans))
         self.fig.canvas.mpl_connect('close_event', self.handle_close)
         self.fig.canvas.mpl_connect('resize_event', self.handle_resize)
 
