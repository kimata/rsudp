diff --git a/rsudp/c_plots.py b/rsudp/c_plots.py
index 1cba4bd..2514bd7 100644
--- a/rsudp/c_plots.py
+++ b/rsudp/c_plots.py
@@ -3,7 +3,7 @@ import pkg_resources as pr
 import time
 import math
 import numpy as np
-from datetime import datetime, timedelta
+from datetime import datetime, timedelta, timezone
 from obspy.signal.trigger import recursive_sta_lta, trigger_onset
 import rsudp.raspberryshake as rs
 from rsudp import printM, printW, printE, get_scap_dir, helpers
@@ -46,7 +46,7 @@ try:
     import matplotlib.dates as mdates
     import matplotlib.image as mpimg
     from matplotlib import rcParams
-    from matplotlib.ticker import EngFormatter
+    from matplotlib.ticker import EngFormatter, FuncFormatter
     import matplotlib.font_manager as fm
     
     # Configure matplotlib settings
@@ -419,10 +419,13 @@ class Plot(AbcPlot):
         '''
         # format strings
         event_time_str = event_time.strftime('%Y-%m-%d-%H%M%S')  # for filename
-        title_time_str = event_time.strftime('%Y-%m-%d %H:%M:%S.%f')[:22]  # for title
+        # Convert to JST (UTC+9)
+        jst_tz = timezone(timedelta(hours=9))
+        event_time_jst = event_time.datetime.replace(tzinfo=timezone.utc).astimezone(jst_tz)
+        title_time_str = event_time_jst.strftime('%Y-%m-%d %H:%M:%S.%f')[:22]  # for title
 
         # temporarily set title for this event
-        self.fig.suptitle(f'{self.stn} Detected Event - {title_time_str} UTC',
+        self.fig.suptitle(f'{self.stn} Detected Event - {title_time_str} JST',
                         fontsize=18, color=self.fgcolor, x=0.52, y=0.99)
 
         # save the figure with STA/LTA metadata
@@ -468,7 +471,12 @@ class Plot(AbcPlot):
                                                 1, 1, label=str(1)))
             self.ax[0].set_facecolor(self.bgcolor)
             self.ax[0].tick_params(colors=self.fgcolor, labelcolor=self.fgcolor)
-            self.ax[0].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
+            # JST formatter
+            def jst_formatter(x, pos=None):
+                jst_tz = timezone(timedelta(hours=9))
+                dt = mdates.num2date(x, tz=timezone.utc).astimezone(jst_tz)
+                return dt.strftime('%H:%M:%S')
+            self.ax[0].xaxis.set_major_formatter(FuncFormatter(jst_formatter))
             self.ax[0].yaxis.set_major_formatter(EngFormatter(unit='%s' % self.unit.lower()))
             if self.spectrogram:
                 self.ax.append(self.fig.add_subplot(self.num_chans * self.mult,
@@ -483,7 +491,12 @@ class Plot(AbcPlot):
                                                 1, s + 1, sharex=self.ax[0], label=str(s + 1)))
             self.ax[s].set_facecolor(self.bgcolor)
             self.ax[s].tick_params(colors=self.fgcolor, labelcolor=self.fgcolor)
-            self.ax[s].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
+            # JST formatter
+            def jst_formatter(x, pos=None):
+                jst_tz = timezone(timedelta(hours=9))
+                dt = mdates.num2date(x, tz=timezone.utc).astimezone(jst_tz)
+                return dt.strftime('%H:%M:%S')
+            self.ax[s].xaxis.set_major_formatter(FuncFormatter(jst_formatter))
             self.ax[s].yaxis.set_major_formatter(EngFormatter(unit='%s' % self.unit.lower()))
             if self.spectrogram:
                 # add a spectrogram and set colors
@@ -689,7 +702,7 @@ class Plot(AbcPlot):
         self.ax[i * self.mult + 1].tick_params(axis='x', which='both',
                                                bottom=False, top=False, labelbottom=False)
         self.ax[i * self.mult + 1].set_ylabel('Frequency (Hz)', color=self.fgcolor)
-        self.ax[i * self.mult + 1].set_xlabel('Time (UTC)', color=self.fgcolor)
+        self.ax[i * self.mult + 1].set_xlabel('Time (JST)', color=self.fgcolor)
         # logarithmic y axis
         if self.logarithmic_y_axis:
             custom_ticks = [0.5, 1, 2, 3, 5, 10, 20, 30, 50]
@@ -770,7 +783,7 @@ class Plot(AbcPlot):
                 self._update_specgram(i, mean)
             else:
                 # also can't be in the setup function
-                self.ax[i * self.mult].set_xlabel('Time (UTC)', color=self.fgcolor)
+                self.ax[i * self.mult].set_xlabel('Time (JST)', color=self.fgcolor)
 
     def getq(self, d):
         '''
@@ -793,7 +806,10 @@ class Plot(AbcPlot):
             self.save_timer -= 1  # don't push the save time forward if there are a large number of alarm events
             event = [self.save_timer + int(self.save_pct * self.pkts_in_period),
                      helpers.fsec(helpers.get_msg_time(d))]  # event = [save after count, datetime]
-            self.last_event_str = '%s UTC' % (event[1].strftime('%Y-%m-%d %H:%M:%S.%f')[:22])
+            # Convert to JST for display
+            jst_tz = timezone(timedelta(hours=9))
+            event_jst = event[1].datetime.replace(tzinfo=timezone.utc).astimezone(jst_tz)
+            self.last_event_str = '%s JST' % (event_jst.strftime('%Y-%m-%d %H:%M:%S.%f')[:22])
             printM('Event time: %s' % (self.last_event_str), sender=self.sender)  # show event time in the logs
             
             # Extract STA/LTA values from ALARM message
